---

## Install Helm (on bootstrap node)

- name: Install Helm GPG key
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.shell: curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
  args:
    chdir: /usr/share/keyrings/
  environment:
    ANSIBLE_WARN_COMMAND_USAGE: 0
  run_once: True

- name: Collect dpkg --print-architecture
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.shell: dpkg --print-architecture
  register: dpkg_architecture
  run_once: True

- name: Setup /helm-stable-debian.list sources list
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.copy:
    dest: /etc/apt/sources.list.d/helm-stable-debian.list
    content: |
      deb [arch={{ dpkg_architecture.stdout }} signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main
    mode: '0644'
  run_once: True

- name: Update repos
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.package:
    update_cache: yes
  register: package_status
  until: package_status is success
  delay: 6
  retries: 10
  run_once: True

- name: Install Helm
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.package:
    name: helm
    state: present
  register: package_status
  until: package_status is success
  delay: 6
  retries: 10
  run_once: True

#helm repo add longhorn https://charts.longhorn.io

- name: Add the Longhorn Helm repository
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: helm repo add longhorn https://charts.longhorn.io
  run_once: True

#helm repo update

- name: Update the Helm repositories
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: helm repo update
  run_once: True

#kubectl create namespace longhorn-system

- name: Check if the Longhorn namespace exists
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: kubectl get namespace longhorn-system
  run_once: True
  register: longhorn_namespace_check
  ignore_errors: True

- name: Create a namespace for Longhorn
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: kubectl create namespace longhorn-system
  run_once: True
  when: "longhorn_namespace_check.rc != 0 and 'not found' in longhorn_namespace_check.stderr"

#helm install longhorn longhorn/longhorn --namespace longhorn-system

- name: Check if Longhorn is already installed
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: helm list --namespace longhorn-system --filter "^longhorn$"
  register: longhorn_helm_check
  run_once: True
  ignore_errors: True

- name: Deploy Longhorn using Helm
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: helm install longhorn longhorn/longhorn --namespace longhorn-system
  run_once: True
  when: "'longhorn' not in longhorn_helm_check.stdout"

- name: Check if partitions exist on extra disks
  ansible.builtin.command: "parted -s /dev/vd{{ item | int | to_letter }} print"
  register: partition_status
  loop: "{{ range(2, (number_of_volumes | int) + 2) | list }}"
  failed_when: false
  when: ( rke2_type == "agent" ) or ( worker_nodes | length == 0 )
  changed_when: false
  check_mode: no

#- name: Define a no_partition string
#  set_fact:
#    no_partition: "Error: No partition table found on device"
#  when: ( rke2_type == "agent" ) or ( worker_nodes | length == 0 )

- name: Create partitions on extra disks
  ansible.builtin.parted:
    device: "/dev/vd{{ item.item | int | to_letter }}"
    number: 1
    state: present
  loop: "{{ partition_status.results }}"
  when: ( ( rke2_type == "agent" ) or ( worker_nodes | length == 0 ) ) and ('loop' not in item.stdout) 
  ignore_errors: True

- name: Create mount directories
  ansible.builtin.file:
    path: "/mnt/longhorn-bricks/brick{{ item }}"
    state: directory
  loop: "{{ range(1, number_of_volumes + 1)|list }}"
  when: ( rke2_type == "agent" ) or ( worker_nodes | length == 0 )

- name: Format EXT4 partitions
  ansible.builtin.filesystem:
    dev: "/dev/vd{{ (item + 1) | to_letter }}"
    fstype: ext4
  loop: "{{ range(1, (number_of_volumes | int) + 1) | list }}"
  when: ( rke2_type == "agent" ) or ( worker_nodes | length == 0 )

- name: Mount ext4 file systems
  ansible.builtin.mount:
    path: "/mnt/longhorn-bricks/brick{{ item }}"
    src: "/dev/vd{{ (item + 1) | to_letter }}"
    fstype: ext4
    state: mounted
  loop: "{{ range(1, (number_of_volumes | int) + 1) | list }}"
  when: ( rke2_type == "agent" ) or ( worker_nodes | length == 0 )

- name: Set longhorn_mounts variable
  set_fact:
    longhorn_mounts: "{{ range(1, (number_of_volumes | int) + 1) | list | map('regex_replace', '^(.*)$', 'storage\\1:/mnt/longhorn-bricks/brick\\1') | join(',') }}"
  when: ( rke2_type == "agent" ) or ( worker_nodes | length == 0 )

- name: Configure Longhorn storage
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.shell: |
    kubectl -n longhorn-system annotate nodes {{ inventory_hostname }} \
      -o jsonpath='{.metadata.annotations}' \
      --overwrite \
      longhorn.io/node={{ longhorn_mounts | join('') }}
  when: ( rke2_type == "agent" ) or ( worker_nodes | length == 0 )
  register: longhorn_storage_config

- name: DEBUG - Longhorn storage configuration
  ansible.builtin.debug:
    msg: "{{ longhorn_storage_config.stdout_lines }}"
  when: ( rke2_type == "agent" ) or ( worker_nodes | length == 0 )

# kubectl -n longhorn-system get nodes awx4.example.org awx5.example.org -o jsonpath='{.items[*].metadata.annotations.longhorn\.io/node}'

- name: Examine the Longhorn_mounts
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.shell: |
    kubectl -n longhorn-system get nodes {{ inventory_hostname }} -o jsonpath='{.items[*].metadata.annotations.longhorn\.io/node}'
  when: ( rke2_type == "agent" ) or ( worker_nodes | length == 0 )
  register: longhorn_mounts_check

- name: DEBUG - Longhorn mounts
  ansible.builtin.debug:
    msg: "{{ longhorn_mounts_check.stdout_lines }}"
  when: ( rke2_type == "agent" ) or ( worker_nodes | length == 0 )