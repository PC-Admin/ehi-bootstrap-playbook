---

- debug:
    msg: "The public SSH key to check for: {{ public_ssh_key }}"
  run_once: True

- name: Collect list of DigitalOcean public SSH keys
  delegate_to: 127.0.0.1
  community.digitalocean.digital_ocean_sshkey_info:
    oauth_token: '{{ do_api_token }}'
  register: ssh_keys
  run_once: True

#- debug:
#    msg: "{{ ssh_keys }}"

- name: Build an array with the correct SSH key ID
  delegate_to: 127.0.0.1
  set_fact:
    ssh_key_id_array: "[ '{{ item.id }}' ]"
  when: item.public_key == public_ssh_key
  loop: "{{ ssh_keys.data|flatten(levels=1) }}"
  run_once: True

#- debug:
#    msg: "{{ ssh_key_id_array }}"

- name: Spawn a new Digital Ocean Droplet for each node, collect the IPv4+IPv6 addresses
  delegate_to: 127.0.0.1
  community.digitalocean.digital_ocean_droplet:
    state: present
    name: '{{ awx_subdomain }}.{{ awx_base_domain }}'
    oauth_token: '{{ do_api_token }}'
    size: '{{ slug_size }}'
    ssh_keys: '{{ ssh_key_id_array }}'
    region: '{{ do_droplet_region }}'
    image: '{{ do_image }}'
    ipv6: yes
    wait: yes
    unique_name: yes
    tags: "{{ 'rke2-master' if rke2_type == 'server' else 'rke2-worker' if rke2_type == 'agent' }}"
  register: new_server_info
  #when: rke2_type == 'server'

- debug:
    msg: "{{ new_server_info }}"
  run_once: True

- name: Add droplet ID to hostvars
  set_fact:
    droplet_id: "{{ new_server_info.data.droplet.id }}"

- name: Group hosts by droplet_ids
  group_by:
    key: "droplet_ids_{{ droplet_id }}"

- name: Extract droplet_ids
  set_fact:
    droplet_ids: "{{ groups | select('match', '^droplet_ids_') | map('replace', 'droplet_ids_', '') | map('int') | list }}"
  delegate_to: localhost
  run_once: true

- name: Display droplet_ids
  ansible.builtin.debug:
    var: droplet_ids
  delegate_to: localhost
  run_once: true

- name: Assign server IPv4 to a variable
  delegate_to: 127.0.0.1
  set_fact:
    server_ipv4: "{{ new_server_info.data.droplet.networks.v4[0].ip_address }}"
  when: new_server_info.data.droplet.networks.v4[0].type == "public"

- name: Assign server IPv4 to a variable
  delegate_to: 127.0.0.1
  set_fact:
    server_ipv4: "{{ new_server_info.data.droplet.networks.v4[1].ip_address }}"
  when: new_server_info.data.droplet.networks.v4[1].type == "public"

#- debug:
#    msg: "{{ new_server_info.data.droplet.networks }}"

- name: Assign server IPv6 to a variable
  delegate_to: 127.0.0.1
  set_fact:
    server_ipv6: "{{ new_server_info.data.droplet.networks.v6[0].ip_address }}"
  when: ( new_server_info.data.droplet.networks.v6 is defined ) and ( new_server_info.data.droplet.networks.v6 | length > 0 ) and ( new_server_info.data.droplet.networks.v6[0].type == "public" )

#- debug:
#    msg: "{{ server_ipv4 }}"

#- debug:
#    msg: "{{ server_ipv6 }}"

#- name: Add server_ipv4 line to inventory file
#  delegate_to: 127.0.0.1
#  lineinfile:
#    path: './inventory/host_vars/{{ awx_subdomain }}.{{ awx_base_domain }}/vars.yml'
#    regexp: "^#? *{{ item.key | regex_escape() }}:"
#    line: "{{ item.key }}: {{ item.value }}"
#    mode: '0600'
#    state: present
#  with_dict:
#    'server_ipv4': '"{{ server_ipv4 }}"'
#  when: server_ipv4|length > 0

#- name: Add server_ipv6 line to inventory file
#  delegate_to: 127.0.0.1
#  lineinfile:
#    path: './inventory/host_vars/{{ awx_subdomain }}.{{ awx_base_domain }}/vars.yml'
#    regexp: "^#? *{{ item.key | regex_escape() }}:"
#    line: "{{ item.key }}: {{ item.value }}"
#    mode: '0600'
#    state: present
#  with_dict:
#    'server_ipv6': '"{{ server_ipv6 }}"'
#  when: server_ipv6|length > 0

- name: Add do_droplet_id line to inventory file
  delegate_to: 127.0.0.1
  lineinfile:
    path: './inventory/host_vars/{{ awx_subdomain }}.{{ awx_base_domain }}/vars.yml'
    regexp: "^{{ item.key }}:.*$"
    line: "{{ item.key }}: {{ item.value }}"
    mode: '0600'
    state: present
  with_dict:
    'do_droplet_id': '{{ new_server_info.data.droplet.id }}'
  when: ( new_server_info is defined ) and ( new_server_info.data.droplet.id is defined )

- name: "Load new variables from the inventory file of each host"
  include_vars:
    file: './inventory/host_vars/{{ inventory_hostname }}/vars.yml'