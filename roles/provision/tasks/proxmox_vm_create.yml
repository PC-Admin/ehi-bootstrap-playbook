---

- name: "Create a full clone of the template for each host (sequentially)"
  delegate_to: 127.0.0.1
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_host }}"
    api_user: "{{ proxmox_user }}"
    api_token_id: "{{ proxmox_token_id }}"
    api_token_secret: "{{ proxmox_token_secret }}"
    name: "{{ item }}"
    node: "{{ proxmox_node }}"
    clone: "{{ proxmox_template }}"
    storage: "{{ proxmox_storage }}"
    full: true
    state: present
    timeout: 300
  register: new_server_info
  with_items: "{{ ansible_play_hosts }}"
  when: proxmox_method == "clone"
  run_once: true

- name: "Create LXC containers for each host (sequentially)"
  delegate_to: 127.0.0.1
  community.general.proxmox:
    api_host: "{{ proxmox_host }}"
    api_user: "{{ proxmox_user }}"
    api_token_id: "{{ proxmox_token_id }}"
    api_token_secret: "{{ proxmox_token_secret }}"
    node: "{{ proxmox_node }}"
    ostemplate: "{{ proxmox_lxc_template }}"
    storage: "{{ proxmox_storage }}"
    cpus: "{{ proxmox_lxc_cpus }}"
    memory: "{{ proxmox_lxc_memory }}"
    swap: "{{ proxmox_lxc_swap }}"
    hostname: "{{ item }}"
    password: "{{ proxmox_lxc_password }}"
    #sshkeys: "{{ public_ssh_key }}"
    unprivileged: "{{ proxmox_lxc_unprivileged | default(omit) }}"
    state: present
    timeout: 300
    netif: '{"net0":"name=eth0,bridge=vmbr0,ip=dhcp,ip6=dhcp,type=veth"}'
  register: new_server_info
  with_items: "{{ ansible_play_hosts }}"
  when: proxmox_method == "lxc"
  run_once: true

- name: "Print each entry from new_server_info.results"
  debug:
    msg: "{{ item }}"
  with_items: "{{ new_server_info.results }}"
  run_once: true

- name: "Print the vmid of each entry from new_server_info.results"
  debug:
    msg: "{{ item.vmid }}"
  with_items: "{{ new_server_info.results }}"
  run_once: true
  ignore_errors: true

- name: Start the new VMs (sequentially)
  delegate_to: 127.0.0.1
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_host }}"
    api_user: "{{ proxmox_user }}"
    api_token_id: "{{ proxmox_token_id }}"
    api_token_secret: "{{ proxmox_token_secret }}"
    vmid: "{{ item.vmid }}"
    node: "{{ proxmox_node }}"
    state: started
  register: new_server_info_2
  with_items: "{{ new_server_info.results }}"
  when: proxmox_method == "clone"
  run_once: true

- name: "Start LXC containers for each host (sequentially)"
  delegate_to: 127.0.0.1
  community.general.proxmox:
    api_host: "{{ proxmox_host }}"
    api_user: "{{ proxmox_user }}"
    api_token_id: "{{ proxmox_token_id }}"
    api_token_secret: "{{ proxmox_token_secret }}"
    node: "{{ proxmox_node }}"
    hostname: "{{ item }}"
    state: started
  register: new_server_info_2
  loop: "{{ ansible_play_hosts }}"
  when: proxmox_method == "lxc"
  run_once: true

- name: Print stdout of new_server_info_2.results
  debug:
    msg: "new_server_info_2: {{ item }}"
  with_items: "{{ new_server_info_2.results }}"
  run_once: true

- name: "Add public SSH key to authorized_keys"
  authorized_key:
    user: "{{ proxmox_lxc_user }}"
    state: present
    key: "{{ public_ssh_key }}"

- name: Set string fact for checking is QEMU is running yet
  set_fact:
    qemu_unloaded_status: "QEMU guest agent is not running"

- name: Probe proxmox host for VMs network details for up to 180 seconds
  delegate_to: "{{ proxmox_node }}"
  command: |
      sudo qm guest cmd {{ item }} network-get-interfaces
  register: qemu_guest_info
  until: qemu_guest_info.stderr != qemu_unloaded_status
  retries: 12
  delay: 15
  with_items: "{{ new_server_info.results | json_query('[*].vmid') | list }}"
  when: proxmox_method == "clone"
  run_once: true

#- name: qemu_guest_info
#  debug:
#    msg: "{{ qemu_guest_info }}"

#- name: qemu_guest_info.results
#  debug:
#    msg: "{{ qemu_guest_info.results }}"

#- name: "Print the stdout of each entry from qemu_guest_info.results"
#  debug:
#    msg: "{{ item.stdout | from_json | json_query('[*][\"ip-addresses\"][0][0] | [1]') | json_query('[\"ip-address\"][0]') }}"
#  with_items: "{{ qemu_guest_info.results }}"
#  run_once: true

#- name: "Print the stdout of each entry from qemu_guest_info.results"
#  debug:
#    msg: "{{ item.stdout | from_json | json_query('[*][\"ip-addresses\"][0][1] | [1]') | json_query('[\"ip-address\"][0]') }}"
#  with_items: "{{ qemu_guest_info.results }}"
#  run_once: true

# https://stackoverflow.com/questions/46411107/iterating-over-two-lists-in-ansible

#- name: "Print the ansible hostname as well as the server_ipv4 variable"
#  debug:
#    msg: "{{ item.0 }} - {{ item.1.stdout | from_json | json_query('[*][\"ip-addresses\"][0][0] | [1]') | json_query('[\"ip-address\"][0]') }}"
#  loop: "{{ ansible_play_hosts | zip(qemu_guest_info.results) | list }}"
#  run_once: true

- name: "Write IPv4 to each hosts inventory file"
  delegate_to: 127.0.0.1
  lineinfile:
    path: './inventory/host_vars/{{ item.0 }}/vars.yml'
    regexp: "^#?server_ipv4:.*$"
    line: "server_ipv4: {{ item.1.stdout | from_json | json_query('[*][\"ip-addresses\"][0][0] | [1]') | json_query('[\"ip-address\"][0]') }}"
    mode: '0600'
    state: present
  when: "{{ item.1.stdout | from_json | json_query('[*][\"ip-addresses\"][0][0] | [1]') | json_query('[\"ip-address\"][0]') | length > 0 }}"
  loop: "{{ ansible_play_hosts | zip(qemu_guest_info.results) | list }}"
  run_once: true

- name: "Write IPv6 to each hosts inventory file"
  delegate_to: 127.0.0.1
  lineinfile:
    path: './inventory/host_vars/{{ item.0 }}/vars.yml'
    regexp: "^#?server_ipv6:.*$"
    line: "server_ipv6: {{ item.1.stdout | from_json | json_query('[*][\"ip-addresses\"][0][1] | [1]') | json_query('[\"ip-address\"][0]') }}"
    mode: '0600'
    state: present
  when: "{{ item.1.stdout | from_json | json_query('[*][\"ip-addresses\"][0][1] | [1]') | json_query('[\"ip-address\"][0]') | length > 0 }}"
  loop: "{{ ansible_play_hosts | zip(qemu_guest_info.results) | list }}"
  run_once: true

#- name: Print vmid lines
#  debug:
#    msg: "{{ item.vmid }}"
#  with_items: "{{ new_server_info.results }}"
#  run_once: true

- name: Extract VM IDs from new_server_info_2
  set_fact:
    vm_ids: "{{ new_server_info_2.results | map(attribute='msg') | map('regex_replace', 'VM ([0-9]+) is already running', '\\1') | list }}"
  when: proxmox_method == "lxc"
  run_once: true

- name: Display VM IDs
  debug:
    var: vm_ids
  when: proxmox_method == "lxc"
  run_once: true

- name: Add vmid line to each hosts inventory file
  delegate_to: 127.0.0.1
  lineinfile:
    path: './inventory/host_vars/{{ item.0 }}/vars.yml'
    regexp: "^#?vmid:.*$"
    line: "vmid: {{ item.1.vmid }}"
    mode: '0600'
    state: present
  when: ( proxmox_method == "clone" ) and ( item.1.vmid is defined ) and ( item.1.vmid | string | length > 0 ) 
  loop: "{{ ansible_play_hosts | zip(new_server_info.results) | list }}"
  run_once: true

- name: Add vmid line to each hosts inventory file
  delegate_to: 127.0.0.1
  lineinfile:
    path: './inventory/host_vars/{{ item.0 }}/vars.yml'
    regexp: "^#?vmid:.*$"
    line: "vmid: {{ item.1 }}"
    mode: '0600'
    state: present
  when: proxmox_method == "lxc"
  loop: "{{ ansible_play_hosts | zip(vm_ids) | list }}"
  run_once: true

- name: "Load new variables from the inventory file of each host"
  include_vars:
    file: './inventory/host_vars/{{ inventory_hostname }}/vars.yml'