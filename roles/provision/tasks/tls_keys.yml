---

# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=leader.{{ awx_base_domain }}"

- name: Generate private key for self-signed certificate
  delegate_to: 127.0.0.1
  community.crypto.openssl_privatekey:
    path: "{{ playbook_dir }}/certs/tls.key"
  run_once: True
  tags: [ 'never', 'provision' ]

- name: Generate CSR for self-signed certificate
  delegate_to: 127.0.0.1
  community.crypto.openssl_csr:
    path: "{{ playbook_dir }}/certs/tls.csr"
    privatekey_path: "{{ playbook_dir }}/certs/tls.key"
    common_name: "leader.{{ awx_base_domain }}"
  run_once: True
  tags: [ 'never', 'provision' ]

- name: Create self-signed certificate
  delegate_to: 127.0.0.1
  community.crypto.x509_certificate:
    path: "{{ playbook_dir }}/certs/tls.crt"
    privatekey_path: "{{ playbook_dir }}/certs/tls.key"
    csr_path: "{{ playbook_dir }}/certs/tls.csr"
    provider: selfsigned
    selfsigned_not_before: "{{ lookup('pipe', 'date +%Y%m%d%H%M%SZ') }}"
    selfsigned_not_after: "{{ lookup('pipe', 'date -d \"+1 year\" +%Y%m%d%H%M%SZ') | trim }}"
    selfsigned_digest: sha256
  run_once: True
  tags: [ 'never', 'provision' ]

- name: Get existing DigitalOcean SSL Certificates
  delegate_to: 127.0.0.1
  community.digitalocean.digital_ocean_certificate_info:
    oauth_token: "{{ do_api_token }}"
  register: do_certificates_info
  run_once: True
  tags: [ 'never', 'provision' ]

- name: Debug do_certificates_info
  debug:
    var: do_certificates_info
  run_once: True
  tags: [ 'never', 'provision' ]

- name: Check if desired certificate exists
  set_fact:
    existing_certificate: "{{ item }}"
  when: item.name == "leader." + awx_base_domain
  with_items: "{{ do_certificates_info.data }}"
  run_once: True
  tags: [ 'never', 'provision' ]

- name: Create DigitalOcean SSL Certificate for the Load Balancer if it does not exist
  delegate_to: 127.0.0.1
  community.digitalocean.digital_ocean_certificate:
    name: "leader.{{ awx_base_domain }}"
    private_key: "{{ lookup('file', '{{ playbook_dir }}/certs/tls.key') }}"
    leaf_certificate: "{{ lookup('file', '{{ playbook_dir }}/certs/tls.crt') }}"
    state: present
    oauth_token: "{{ do_api_token }}"
  register: new_do_certificate
  when: existing_certificate is not defined
  run_once: True
  tags: [ 'never', 'provision' ]

- name: Set do_certificate variable
  set_fact:
    do_certificate: "{{ existing_certificate | default(new_do_certificate.data) }}"
  run_once: True
  tags: [ 'never', 'provision' ]
