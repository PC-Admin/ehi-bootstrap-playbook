---

## Install cert-manager (from bootstrap node)

- name: Install cert-manager (from bootstrap node)
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: /var/lib/rancher/rke2/bin/kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.6.1/cert-manager.crds.yaml
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True

## Create a namespace for Cert-Manager:

- name: Check if the Cert-Manager namespace exists
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: /var/lib/rancher/rke2/bin/kubectl get namespace cert-manager
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True
  register: cert_manager_namespace_check
  ignore_errors: True

- name: Create a namespace for Cert-Manager
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: /var/lib/rancher/rke2/bin/kubectl create namespace cert-manager
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True
  when: "cert_manager_namespace_check.rc != 0 and 'not found' in cert_manager_namespace_check.stderr"

## Add the Jetstack Helm repository:

- name: Add the Jetstack Helm repository
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: helm repo add jetstack https://charts.jetstack.io
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True

## Deploy Cert-Manager using Helm:

- name: Check if Cert-Manager is already installed
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: helm list --namespace cert-manager --filter "^cert-manager$"
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  register: cert_manager_helm_check
  run_once: True
  ignore_errors: True

- name: Deploy Cert-Manager using Helm
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.6.1 --create-namespace
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True
  when: "'cert-manager' not in cert_manager_helm_check.stdout"

- name: Verify the Cert-Manager installation
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: /var/lib/rancher/rke2/bin/kubectl get pods --namespace cert-manager
  register: cert_manager_status
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True

- name: Display Cert-Manager status output
  ansible.builtin.debug:
    msg: "{{ cert_manager_status.stdout_lines }}"
  run_once: True

## Install Rancher

- name: Add the Rancher Helm repository
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: helm repo add rancher-stable https://releases.rancher.com/server-charts/stable
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True

## Create a namespace for Rancher:

- name: Check if the Rancher namespace exists
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: /var/lib/rancher/rke2/bin/kubectl get namespace cattle-system
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True
  register: rancher_namespace_check
  ignore_errors: True

- name: Create a namespace for Rancher
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: /var/lib/rancher/rke2/bin/kubectl create namespace cattle-system
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True
  when: "rancher_namespace_check.rc != 0 and 'not found' in rancher_namespace_check.stderr"

# also need to ensure "cattle-fleet-system" and "cattle-global-data" namespaces exist

- name: Check if the cattle-fleet-system namespace exists
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: /var/lib/rancher/rke2/bin/kubectl get namespace cattle-fleet-system
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True
  register: cattle_fleet_system_namespace_check
  ignore_errors: True

- name: Create a namespace for cattle-fleet-system
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: /var/lib/rancher/rke2/bin/kubectl create namespace cattle-fleet-system
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True
  when: "cattle_fleet_system_namespace_check.rc != 0 and 'not found' in cattle_fleet_system_namespace_check.stderr"

- name: Check if the cattle-global-data namespace exists
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: /var/lib/rancher/rke2/bin/kubectl get namespace cattle-global-data
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True
  register: cattle_global_data_namespace_check
  ignore_errors: True

- name: Create a namespace for cattle-global-data
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: /var/lib/rancher/rke2/bin/kubectl create namespace cattle-global-data
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True
  when: "cattle_global_data_namespace_check.rc != 0 and 'not found' in cattle_global_data_namespace_check.stderr"

## Install Perisistent Volume Claim for Rancher

- name: Add prerequisite python3-pip package to Bootstrap node
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.package:
    pkg:
      - python3-pip
  register: package_status
  until: package_status is success
  run_once: True
  delay: 6
  retries: 10

- name: Install the required Kubernetes library
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.pip:
    name: kubernetes
    state: present
  run_once: True

- name: Create PersistentVolumeClaim for Rancher
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.k8s:
    state: present
    namespace: cattle-system
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: rancher-pvc
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ volume_size }}Gi" # Adjust the size as needed
        storageClassName: longhorn-rancher # Make sure this matches your Longhorn StorageClass name
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True

## Install Rancher using Helm with a self-signed certificate:

- name: Check if Rancher is already installed
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: helm list --namespace cattle-system --filter "^rancher$"
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  register: rancher_helm_check
  run_once: True
  ignore_errors: True

- name: Install Rancher using Helm with a self-signed certificate (Stable Branch)
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: >-
    helm install rancher rancher-stable/rancher
    --namespace cattle-system
    --set hostname=rancher.perthchat2.org
    --set ingress.tls.source=rancher
    --set persistence.enabled=true
    --set persistence.storageClass=longhorn-rancher
    --set persistence.size={{ volume_size }}Gi
    --set persistence.existingClaim=rancher-pvc
    --set bootstrapPassword={{ rancher_admin_password }}
    --create-namespace
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True
  when: "'rancher' not in rancher_helm_check.stdout"

## Verify the Rancher installation:

- name: Verify the Rancher installation
  delegate_to: "{{ rke2_bootstrap_node }}"
  ansible.builtin.command: /var/lib/rancher/rke2/bin/kubectl get pods --namespace cattle-system
  register: rancher_status
  environment:
    KUBECONFIG: "/etc/rancher/rke2/rke2.yaml"
  run_once: True

- name: Display Rancher output
  ansible.builtin.debug:
    msg: "{{ rancher_status.stdout_lines }}"
  run_once: True
